# Copyright 2011-2012, Qualcomm Innovation Center, Inc.
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
Import('env')

if(not(env.has_key('GTEST_DIR'))):
    print('GTEST_DIR not specified skipping common unit test build')
elif(env['OS_CONF'] == 'android'):
    print('common unit test build is not yet supported for Android')
else:
    
    gtest_env = env.Clone();
    gtest_dir = gtest_env['GTEST_DIR']
    vars = Variables();
    vars.AddVariables(('GTEST_HOME', '', gtest_dir))
    vars.Update(gtest_env)
    if( env['OS_GROUP'] == 'windows'):
        # gTest requires exception handling which is not required for AllJoyn.
        gtest_env.Append(CFLAGS=['/EHsc'])
        gtest_env.Append(CXXFLAGS=['/EHsc'])
        # gTest does not require the same CPPDEFINES as AllJoyn core.
        gtest_env.Append(CPPDEFINES = ['WIN32', '_LIB'])
        # don't use the _DEBUG define unless the /MDd compiler flag is specified
        #gtest_env.Append(CPPDEFINES = ['WIN32', '_DEBUG', '_LIB']) 
   
    # we replace AllJoyn's include CPPPATH options.  AllJoyn includes stlport that will cause the 
    # gTest code to not compile as expected at this time
    gtest_env.Replace(CPPPATH = [gtest_env.Dir('$GTEST_DIR'), gtest_env.Dir('$GTEST_DIR/include')])    
    
    gtest_obj = gtest_env.StaticObject(target = 'gtest-all', source = ['$GTEST_DIR/src/gtest-all.cc'])
    gtest_env.StaticLibrary(target = 'gtest', source = gtest_obj)
    
    #tests currently don't need to compile gtest main.
    #gtest_main_obj = gtest_env.StaticObject(target = '$OBJDIR/gtest_main', source = ['$GTEST_DIR/src/gtest_main.cc'])
    #gtest_main_lib = gtest_env.StaticLibrary(target = '$OBJDIR/gtest_main', source = gtest_main_obj)
#    VariantDir('../$OBJDIR/unittest/public', 'public', duplicate=0)
    #env.SConscript('public/SConscript', variant_dir='../$OBJDIR/unittest/public', duplicate=0)
    #env.SConscript('internal/SConscript', variant_dir='../$OBJDIR/unittest/internal', duplicate=0)
    
    
    test_src = env.Glob('*.cc')

    unittest_env = env.Clone()

    gtest_dir = unittest_env['GTEST_DIR']
    # use the relative path from the build directory.
    # include all header files even if they will not be in the public repository.  
    unittest_env.Replace(CPPPATH = [gtest_dir + '/include', 
                                '../../../../../../inc',
                                '../../../../../../../alljoyn_core/inc'])

    if( env['OS_GROUP'] == 'windows'):
        # gTest requires exception handling which is not required for AllJoyn.
        unittest_env.Append(CFLAGS=['/EHsc'])
        unittest_env.Append(CXXFLAGS=['/EHsc'])
    
    # path for alljoyn library file
    unittest_env.Append(LIBPATH = ['$DISTDIR/lib'])
    # gtest library file is placed in same folder as the the object files.
    unittest_env.Append(LIBPATH = ['./'])
    
    # using the alljoyn library to test common sicne the status object file is not
    # compiled till alljoyn_core is compiled.
    unittest_env.Append(LIBS = ['gtest', 'alljoyn'])
    
    obj = unittest_env.Object(test_src);


    unittest_prog = unittest_env.Program('cmtest', obj)
    unittest_env.Install('$DISTDIR/../test', unittest_prog)
